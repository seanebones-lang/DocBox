version: '3.9'

services:
  # PostgreSQL 17 with pgvector
  postgres:
    image: pgvector/pgvector:pg17
    container_name: docbox-postgres
    environment:
      POSTGRES_DB: docbox
      POSTGRES_USER: docbox_user
      POSTGRES_PASSWORD: docbox_pass_dev
      POSTGRES_INITDB_ARGS: "-E UTF8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-postgres.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U docbox_user -d docbox"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - docbox-network

  # Neo4j 5.x Graph Database
  neo4j:
    image: neo4j:5-enterprise
    container_name: docbox-neo4j
    environment:
      NEO4J_AUTH: neo4j/docbox_neo4j_dev
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
      NEO4J_dbms_memory_heap_max__size: 2G
      NEO4J_dbms_memory_pagecache_size: 1G
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:7474 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - docbox-network

  # Redis 7.x Cache
  redis:
    image: redis:7-alpine
    container_name: docbox-redis
    command: redis-server --appendonly yes --requirepass docbox_redis_dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - docbox-network

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: docbox-qdrant
    ports:
      - "6333:6333"  # HTTP API
      - "6334:6334"  # gRPC API
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__GRPC_PORT: 6334
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:6333/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - docbox-network

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: docbox-backend
    environment:
      DATABASE_URL: postgresql://docbox_user:docbox_pass_dev@postgres:5432/docbox
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: docbox_neo4j_dev
      REDIS_URL: redis://:docbox_redis_dev@redis:6379/0
      QDRANT_HOST: qdrant
      QDRANT_PORT: 6333
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - docbox-network

  # Admin Web Application (Next.js 15)
  web-app:
    build:
      context: ./web-app
      dockerfile: Dockerfile
    container_name: docbox-web
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_WS_URL: ws://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./web-app:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    command: npm run dev
    networks:
      - docbox-network

  # Kiosk Application (Next.js 15 PWA)
  kiosk-app:
    build:
      context: ./kiosk-app
      dockerfile: Dockerfile
    container_name: docbox-kiosk
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_KIOSK_MODE: "true"
    ports:
      - "3001:3000"
    volumes:
      - ./kiosk-app:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    command: npm run dev
    networks:
      - docbox-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: docbox-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - docbox-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: docbox-grafana
    ports:
      - "3100:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - docbox-network

  # Elasticsearch for logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: docbox-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - docbox-network

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: docbox-kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - docbox-network

volumes:
  postgres_data:
  neo4j_data:
  neo4j_logs:
  redis_data:
  qdrant_data:
  backend_uploads:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  docbox-network:
    driver: bridge

