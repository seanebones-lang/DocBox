name: DocBox Healthcare System CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: docbox_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run backend tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/docbox_test
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key-for-ci
        ENCRYPTION_KEY: dGVzdC1lbmNyeXB0aW9uLWtleS1mb3ItY2k=
      run: |
        cd backend
        python -m pytest tests/ -v --cov=. --cov-report=xml
    
    - name: Security scan with Bandit
      run: |
        cd backend
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          web-app/package-lock.json
          kiosk-app/package-lock.json
    
    - name: Install web-app dependencies
      run: |
        cd web-app
        npm ci
    
    - name: Build web-app
      run: |
        cd web-app
        npm run build
    
    - name: Test web-app
      run: |
        cd web-app
        npm test -- --coverage --watchAll=false
    
    - name: Install kiosk-app dependencies
      run: |
        cd kiosk-app
        npm ci
    
    - name: Build kiosk-app
      run: |
        cd kiosk-app
        npm run build
    
    - name: Test kiosk-app
      run: |
        cd kiosk-app
        npm test -- --coverage --watchAll=false

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  docker-build:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend Docker image
      run: |
        cd backend
        docker build -t docbox-backend:${{ github.sha }} .
    
    - name: Build web-app Docker image
      run: |
        cd web-app
        docker build -t docbox-webapp:${{ github.sha }} .
    
    - name: Build kiosk-app Docker image
      run: |
        cd kiosk-app
        docker build -t docbox-kiosk:${{ github.sha }} .
    
    - name: Test Docker Compose
      run: |
        docker-compose -f docker-compose.yml config

  compliance-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: HIPAA Compliance Check
      run: |
        echo "Checking HIPAA compliance documentation..."
        test -f HIPAA_COMPLIANCE.md
        test -f IP_OWNERSHIP.md
        test -f SECURITY.md
        echo "‚úÖ All compliance documents present"
    
    - name: License Check
      run: |
        echo "Verifying proprietary license..."
        test -f LICENSE
        test -f NOTICE.md
        grep -q "PROPRIETARY" LICENSE
        echo "‚úÖ Proprietary license verified"
    
    - name: Security Headers Check
      run: |
        echo "Checking security configurations..."
        grep -r "CORS" backend/ || echo "‚ö†Ô∏è  CORS configuration should be reviewed"
        grep -r "helmet" web-app/ || echo "‚ö†Ô∏è  Security headers should be reviewed"
        echo "‚úÖ Security check completed"

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [docker-build, compliance-check]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "This would deploy to staging server"
        echo "‚úÖ Staging deployment completed"

  deploy-production:
    runs-on: ubuntu-latest
    needs: [docker-build, compliance-check]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Production
      run: |
        echo "üöÄ Deploying to production environment..."
        echo "This would deploy to production server"
        echo "‚úÖ Production deployment completed"
